<?xml version="1.0" encoding="iso-8859-1"?>

<scripting>
    <topic>
        <name>Variables</name>
        <description>
		Variables have to be inicialized before being used.
		When any uninitialized variable is detected in any expression, the whole expression results nil (an undefined value).
		When an undefined value is encountered in a field where a boolean value is expected, it is converted to false.
		Variables may be unitialized by assigning it the nil value. This effectively destroys the variable as if it never existed.
		</description>
    </topic>
    <topic>
        <name>Array assignment</name>
        <description>
		Assignments used on arrays assign only a pointer to the same array to the target variable.
		When <i>b</i> is an array, after executing <i>a = b</i> both <i>a</i> and <i>b</i> represent the same array.
		When <i>b</i> is changed, <i>a</i> is changed as well. One particular situation that can lead to this behaviour is <i>aList = <f>list</f> sensor_name</i>.
		You can force creating a copy of an array by using the unary operator <f>+Array</f>.
		</description>
    </topic>

    <topic>
        <name>Triggers</name>
        <description>
The <i>Condition</i> expression is used to determine when the trigger is activated.
Boolean variable <i>this</i> is set during evaluation of the condition expression to the primary sensor activation condition.
Array variable <i>thisList</i> is set to the list of all vehicles that would satisfy the primary sensor activation condition.
<i>Condition</i> must return a <t>boolean</t> value.
<br/>

The <i>On Activation</i> and <i>On Deactivation</i> expressions define actions that are peformed when the trigger condition changes
to <i>true</i> or <i>false</i>. Expressions must either be an assignment or return nothing (see type <t>none</t>).
<br/>
Variable denoting trigger can be created by filling in the <i>name</i> field.

		</description>
    </topic>

    <topic>
        <name>Waypoints</name>
        <description>
The <i>Condition</i> expression is used to determine when the waypoint execution is terminated.
Boolean variable <i>this</i> is set during evaluation of the condition expression to the primary waypoint termination condition.
Array variable <i>thisList</i> is set to the list of all units in the group that the given waypoint is assigned to.
<i>Condition</i> must return a <t>boolean</t> value.
<br/>

The <i>On Activation</i> expression defines an action that is peformed after the waypoint is terminated.
The expression must either be an assignment or return nothing (see type <t>none</t>).

		</description>
    </topic>

    <topic>
        <name>Script syntax</name>
        <description>
Each script line may be one of the following:<nibr/>
<nibr/>
<b>Comment:</b> line starting with ';'. <br/>
Example: <i>;This is comment</i><nibr/><nibr/>
<b>Label:</b> line starting with '#'. <br/>
Example: <i>#LabelName</i><nibr/><nibr/>
<b>Waiting for a condition:</b> line starting with '@'. <br/>
Example: <i>@condition</i><nibr/><nibr/>
<b>Waiting for a time:</b> line starting with '&amp;'. <br/>
Example: <i>&amp;endTime</i> is equivalent to <i>@_time &gt;= (endTime)</i><nibr/><nibr/>
<b>Delay:</b> line starting with '~'. <br/>
Example: <i>~delay</i> is equivalent to <i>__waitUntil = _time+(cas) ; &amp;__waitUntil</i><nibr/><nibr/>
<b>Command:</b> any expression returning no value.<br/>
Example: <i>_unit setBehaviour "safe"</i><nibr/><nibr/>
<b>Assignment:</b> assignment of any value to variable.<br/>
Example: <i>_a = 10</i><nibr/><nibr/>
<b>Conditional:</b> ? condition : command or assignmented, the command is executed only when the condition is satisfied.<br/>
Example: <i>?_condVar>10:_var=_var+2</i><nibr/><nibr/>
<br/>
Note: variable <i>_time</i> is reserved. It is used to keep the time elapsed since the script execution started.
<br/>
Local variables can be used during script execution to avoid variable conflicts.
A local variable name starts with an underscore ('_').
Variables starting with two underscores are reserved and should never be used.
		</description>
    </topic>

	<topic>
		<name>Event based scripts</name>
		<description>
			There are some scripts in the game which are launched when a particular event occured.
			Some of them have a name given by the mission designer (scripted waypoint, particle scripts (since 1.50) or user action scripts).
			Names of others are given by the program.<nibr/><nibr/>
			<b>init.sqs</b> - launched when the mission is started (before the briefing screen)<br/>
			- no arguments<nibr/><nibr/>
			<b>initIntro.sqs</b> - launched when the intro is started (since 1.50)<br/>
			- no arguments<nibr/><nibr/>
			<b>exit.sqs</b> - launched when the mission is finished (before the debriefing screen, since 1.50)<br/>
			- argument: <i>end #</i> - number of game endings<nibr/><nibr/>
			<b>onFlare.sqs</b> - launched when an illuminating shell is lit(since 1.45)<br/>
			- arguments: [[<i>r</i>, <i>g</i>, <i>b</i>], <i>gunner</i>] - r, g, b is the light color
		</description>
	</topic>

    <topic>
        <name>Code strings</name>
        <description>
Many languague constructs (including forEach, if and while) use the concept of "code strings".
Code is passed to them as a string and they interpret it as code if they wish.
Since 1.85 string constants can be written in two ways: using double quotes (like "Hello")
or curled braces (like {a=a+1}). While both ways are currently equivalent and a string constant is created,
we recommend to use curled braces for code only, as this makes scripts easier to read; moreover future
versions of the scripting language may precompile code enclosed in curled braces.
		</description>
    </topic>
    <topic>
        <name>Functions - SQF</name>
        <description>
While script syntax (see <f>exec</f>) is line based, functions (see <f>call</f>, <f>then</f>, <f>do</f>)
is based on structured expressions and end-of-line
has no special meaning, it is considered to be equivalent to a space. Semicolon is therefore required even when ending a line.
Note: scripts can do some things that are not possible in functions. Scripts can wait suspended until a certain condition it met and they can also use goto to change the execution point at any time.<br/>
<br/>Main language contructs used in functions are:<br/>
<tab/><f>if</f>..<f>then</f>..<f>else</f><br/>
<tab/><f>while</f>..<f>do</f><br/>
<tab/>Curled braces<br/>
<tab/>Multiple commands (including assigment commands) delimited with a semicolon<br/>
<br/>The result of the last expression evaluated is returned as a function result.
This can be <t>nothing</t> when a function returns no value.<br/>

<br/><br/><b>Example 1 (max.sqf)</b><br/>
<br/>
comment "Return the maximum of the first and second argument";<br/>
private {"_a","_b"};<br/>
_a = _this select 0;<br/>
_b = _this select 1;<br/>
if (_a>_b) then {_a} else {_b}<br/>
<br/>
<br/><br/><b>Example 2 (infantrySafe.sqf)</b><br/>
<br/>
comment "Switch all infantry units to safe mode";<br/>
{<br/>
<tab/>if (vehicle _x == _x) then<br/>
<tab/>{<br/>
<tab/><tab/>_x setBehaviour "safe"<br/>
<tab/>}<br/>
} forEach _this<br/>
<br/>

Due to the line-based nature of scripts it is not possible to create multiline string constants in them.
To overcome this limitation you can store multiline in separate files and load them using the
 <f>loadFile</f> or <f>preprocessFile</f> functions
(the second uses a C-like preprocessor with // or /* */ comments and #define macros).
		
The recommended file extension for functions is .SQF (as opposed to .SQS used for scripts).
        </description>
	</topic>


    <topic>
        <name>Local variables</name>
        <description>
		A local variable is any variable which name starts with an underscore. All other variables are global.<br/>
Each of the commands <f>then</f>, <f>do</f>, <f>while</f>, <f>forEach</f>, <f>count</f>, <f>exec</f> and <f>call</f>
define a visibility scope for local variables.
All local variables from outer scopes are visible as well.
If assignment is made into a variable that does not exist in any visible scope,
it is created in the innermost scope.
You can use function <f>private</f> to introduce variables at any given scope.
		</description>
    </topic>

    <topic>
        <name>Event handlers</name>
        <description>
Event handlers can be defined in a unit config or by function <f>addEventHandler</f>.
Multiple handlers can be attached at one time.
The event handler types are defined below.
Each handler receives arguments in _this. _this select 0 is always the source of the event.
Other argument types and meaning are defined below.<br/>
<br/>
	"Killed" <t>object</t>:killer<br/>
	"Hit" <t>object</t>:causedBy,<t>scalar</t>:howMuch<br/>
	"Engine" <t>bool</t>:engineState<br/>
	<br/>
	"GetIn" <t>string</t>:position (1),<t>object</t>:unit<br/> 
	"GetOut" <t>string</t>:position (1),<t>object</t>:unit<br/>
	<br/>
	"Fired" <t>string</t>:weapon,<t>string</t>:muzzle,<t>string</t>:mode,<t>string</t>:ammo<br/>
	"IncomingMissile" <t>string</t>:ammo,<t>object</t>:whoFired<br/>
	"Dammaged" <t>string</t>:selectionName,<t>scalar</t>:howMuch<br/>
	"Gear" <t>bool</t>:gearState<br/>
	"Fuel" <t>bool</t>:fuelState<br/>
	<br/>
	"Init" No arguments<br/>
	<br/>
	(1) position can be "driver", "gunner", "commander", "cargo"<br/>
<br/>
	MP notes: "Killed" and "Hit" event handlers are executed where the given unit is local.
	All other event handlers are executed on all computers.
	Events added by <f>addEventHandler</f> may be different on each computer.
		</description>
    </topic>

</scripting>
